datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id             Int            @id @default(autoincrement())
  departmentName String         @unique @db.VarChar(255)
  teachingUnits  TeachingUnit[]
  students       Student[]
}

model TeachingUnit {
  id               Int        @id @default(autoincrement())
  teachingUnitName String     @db.VarChar(255)
  semester         Int
  departmentId     Int
  department       Department @relation(fields: [departmentId], references: [id])
  subjects         Subject[]

  @@index([departmentId], name: "teaching_unit_index_0")
}

model Subject {
  id                 Int          @id @default(autoincrement())
  teachingUnitId     Int
  subjectName        String       @db.VarChar(255)
  subjectCoefficient Int
  teachingUnit       TeachingUnit @relation(fields: [teachingUnitId], references: [id])
  assessments        Assessment[]

  @@index([teachingUnitId], name: "subject_index_1")
}

model Professor {
  id        Int       @id @default(autoincrement())
  lastName  String    @db.VarChar(50)
  firstName String    @db.VarChar(50)
  account   Account[]
}

model Student {
  id            Int        @id @default(autoincrement())
  lastName      String     @db.VarChar(50)
  firstName     String     @db.VarChar(50)
  studentNumber String     @unique @db.VarChar(8)
  departmentId  Int
  entryYear     Int?
  level         Int
  department    Department @relation(fields: [departmentId], references: [id])
  account       Account[]
  grades        Grade[]

  @@index([studentNumber], name: "student_index_2")
  @@index([departmentId], name: "student_index_3")
}

model Assessment {
  id               Int      @id @default(autoincrement())
  subjectId        Int
  typeOfAssessment String   @db.VarChar(50)
  dateOfAssessment DateTime @default(now())
  coefficient      Int
  fileName         String   @db.VarChar(255)
  period           Int
  semester         Int
  subject          Subject  @relation(fields: [subjectId], references: [id])
  grades           Grade[]

  @@index([subjectId], name: "assessment_index_4")
}

model Grade {
  id           Int        @id @default(autoincrement())
  studentId    Int
  assessmentId Int
  gradeValue   Float
  student      Student    @relation(fields: [studentId], references: [id])
  assessment   Assessment @relation(fields: [assessmentId], references: [id])

  @@index([studentId], name: "grade_index_5")
  @@index([assessmentId], name: "grade_index_6")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id             String    @id @default(cuid())
  name           String?   @db.VarChar(255)
  username       String?   @unique @db.VarChar(30)
  image          String?   @db.VarChar(255)
  hashedPassword String?   @db.VarChar(255)
  role           UserRole  @default(USER)
  email          String    @unique @db.VarChar(255)
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account        Account[]
}

enum AccountType {
  STUDENT
  PROFESSOR
}

model Account {
  id          String      @id @default(cuid())
  userId      String
  studentId   Int?
  professorId Int?
  type        AccountType
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  student     Student?    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  professor   Professor?  @relation(fields: [professorId], references: [id], onDelete: Cascade)

  @@unique([userId, studentId])
  @@unique([userId, professorId])
  @@index([studentId], name: "account_studentId_idx")
  @@index([professorId], name: "account_professorId_idx")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
